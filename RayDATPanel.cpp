// -*- C++ -*-
//
// generated by wxGlade 1.0.3 on Sat Nov 20 16:07:22 2021
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include "RayDATPanel.h"

// begin wxGlade: ::extracode
// end wxGlade



RayDATPanel::RayDATPanel(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style):
  wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
  // begin wxGlade: RayDATPanel::RayDATPanel
  wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
  wxFlexGridSizer* sizer_2 = new wxFlexGridSizer(4, 1, 0, 0);
  sizer_1->Add(sizer_2, 0, wxALIGN_CENTER_HORIZONTAL, 0);
  wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
  sizer_2->Add(sizer_3, 1, wxEXPAND, 0);
  wxStaticBoxSizer* sizer_13 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Clock Source")), wxVERTICAL);
  sizer_3->Add(sizer_13, 1, wxALL|wxEXPAND, 4);
  clockSourceLabel = new wxStaticText(this, wxID_ANY, wxT("Internal"));
  sizer_13->Add(clockSourceLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_14 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Sample Rate")), wxVERTICAL);
  sizer_3->Add(sizer_14, 1, wxALL|wxEXPAND, 4);
  sampleRateLabel = new wxStaticText(this, wxID_ANY, wxT("47999 Hz"));
  sampleRateLabel->SetBackgroundColour(wxColour(255, 198, 0));
  sizer_14->Add(sampleRateLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_15 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Buffer Size")), wxVERTICAL);
  sizer_3->Add(sizer_15, 1, wxALL|wxEXPAND, 4);
  bufferSizeLabel = new wxStaticText(this, wxID_ANY, wxT("1024"));
  sizer_15->Add(bufferSizeLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_20 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("FW version")), wxHORIZONTAL);
  sizer_3->Add(sizer_20, 0, wxALL|wxEXPAND, 4);
  fwVersionLabel = new wxStaticText(this, wxID_ANY, wxT("21"));
  sizer_20->Add(fwVersionLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_12 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Preferred Clock Source / Input Status")), wxVERTICAL);
  sizer_2->Add(sizer_12, 0, wxALL|wxEXPAND, 4);
  wxFlexGridSizer* grid_sizer_2 = new wxFlexGridSizer(10, 5, 4, 4);
  sizer_12->Add(grid_sizer_2, 1, wxEXPAND, 0);
  masterButton = new wxRadioButton(this, masterID, wxT("Internal"));
  grid_sizer_2->Add(masterButton, 0, wxALIGN_CENTER_VERTICAL, 0);
  wxStaticText* label_8 = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(label_8, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  internalFreqLabel = new wxStaticText(this, wxID_ANY, wxT("44.1 KHz"));
  internalFreqLabel->Hide();
  grid_sizer_2->Add(internalFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  const wxString internalFreqChoice_choices[] = {
    wxT("32 KHz"),
    wxT("44.1 KHz"),
    wxT("48 KHz"),
    wxT("64 Khz"),
    wxT("88.2 KHz"),
    wxT("96 KHz"),
    wxT("128 KHz"),
    wxT("176.4 KHz"),
    wxT("192 KHz"),
  };
  internalFreqChoice = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 9, internalFreqChoice_choices);
  grid_sizer_2->Add(internalFreqChoice, 0, wxRESERVE_SPACE_EVEN_IF_HIDDEN, 0);
  internalWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  grid_sizer_2->Add(internalWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  wclkSyncButton = new wxRadioButton(this, wclkSyncID, wxT("Word Clk"));
  grid_sizer_2->Add(wclkSyncButton, 0, 0, 0);
  wclkStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(wclkStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  wclkFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(wclkFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  wclkWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  wclkWarn->Hide();
  grid_sizer_2->Add(wclkWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  aesSyncButton = new wxRadioButton(this, aesSyncID, wxT("AES"));
  grid_sizer_2->Add(aesSyncButton, 0, 0, 0);
  aesStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(aesStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  aesFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(aesFreqLabel, 0, wxALL, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  aesWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  aesWarn->Hide();
  grid_sizer_2->Add(aesWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  spdifSyncButton = new wxRadioButton(this, spdifSyncID, wxT("S/PDIF"));
  grid_sizer_2->Add(spdifSyncButton, 0, 0, 0);
  spdifStatusLabel = new wxStaticText(this, wxID_ANY, wxT("Sync"));
  grid_sizer_2->Add(spdifStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  spdifFreqLabel = new wxStaticText(this, wxID_ANY, wxT("48 KHz"));
  grid_sizer_2->Add(spdifFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  spdifWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  spdifWarn->Hide();
  grid_sizer_2->Add(spdifWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  adat1SyncButton = new wxRadioButton(this, adat1SyncID, wxT("ADAT1"));
  grid_sizer_2->Add(adat1SyncButton, 0, 0, 0);
  adat1StatusLabel = new wxStaticText(this, wxID_ANY, wxT("Lock"));
  grid_sizer_2->Add(adat1StatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  adat1FreqLabel = new wxStaticText(this, wxID_ANY, wxT("48 KHz"));
  grid_sizer_2->Add(adat1FreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  adat1Warn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  adat1Warn->Hide();
  grid_sizer_2->Add(adat1Warn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  adat2SyncButton = new wxRadioButton(this, adat2SyncID, wxT("ADAT2"));
  grid_sizer_2->Add(adat2SyncButton, 0, 0, 0);
  adat2StatusLabel = new wxStaticText(this, wxID_ANY, wxT("Lock"));
  grid_sizer_2->Add(adat2StatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  adat2FreqLabel = new wxStaticText(this, wxID_ANY, wxT("48 KHz"));
  grid_sizer_2->Add(adat2FreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  adat2Warn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  adat2Warn->Hide();
  grid_sizer_2->Add(adat2Warn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  adat3SyncButton = new wxRadioButton(this, adat3SyncID, wxT("ADAT3"));
  grid_sizer_2->Add(adat3SyncButton, 0, 0, 0);
  adat3StatusLabel = new wxStaticText(this, wxID_ANY, wxT("Lock"));
  grid_sizer_2->Add(adat3StatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  adat3FreqLabel = new wxStaticText(this, wxID_ANY, wxT("48 KHz"));
  grid_sizer_2->Add(adat3FreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  adat3Warn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  adat3Warn->Hide();
  grid_sizer_2->Add(adat3Warn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  adat4SyncButton = new wxRadioButton(this, adat4SyncID, wxT("ADAT4"));
  grid_sizer_2->Add(adat4SyncButton, 0, 0, 0);
  adat4StatusLabel = new wxStaticText(this, wxID_ANY, wxT("Lock"));
  grid_sizer_2->Add(adat4StatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  adat4FreqLabel = new wxStaticText(this, wxID_ANY, wxT("48 KHz"));
  grid_sizer_2->Add(adat4FreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  adat4Warn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  adat4Warn->Hide();
  grid_sizer_2->Add(adat4Warn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  tcoSyncButton = new wxRadioButton(this, tcoSyncID, wxT("TCO"));
  tcoSyncButton->Enable(0);
  grid_sizer_2->Add(tcoSyncButton, 0, 0, 0);
  tcoStatusLabel = new wxStaticText(this, wxID_ANY, wxT("N/A"));
  grid_sizer_2->Add(tcoStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  tcoFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(tcoFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  tcoWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  tcoWarn->Hide();
  grid_sizer_2->Add(tcoWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  syncInSyncButton = new wxRadioButton(this, syncInSyncID, wxT("Sync In"));
  grid_sizer_2->Add(syncInSyncButton, 0, 0, 0);
  syncInStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(syncInStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  syncInFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(syncInFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  syncInWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  syncInWarn->Hide();
  grid_sizer_2->Add(syncInWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  wxStaticBoxSizer* sizer_16 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Pitch (PPM)")), wxVERTICAL);
  sizer_2->Add(sizer_16, 1, wxALIGN_CENTER_HORIZONTAL|wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 4);
  pitchSlider = new wxSlider(this, pitchID, 0, -50000, 50000, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS|wxSL_LEFT|wxSL_RIGHT);
  sizer_16->Add(pitchSlider, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
  sizer_2->Add(sizer_10, 1, wxEXPAND, 0);
  wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_4, 1, wxALL|wxEXPAND, 4);
  const wxString spdifInBox_choices[] = {
    wxT("Optical"),
    wxT("Coaxial"),
    wxT("Internal"),
  };
  spdifInBox = new wxRadioBox(this, spdifInID, wxT("S/PDIF In"), wxDefaultPosition, wxDefaultSize, 3, spdifInBox_choices, 1, wxRA_SPECIFY_COLS);
  spdifInBox->SetSelection(1);
  sizer_4->Add(spdifInBox, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  wxBoxSizer* sizer_5 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_5, 1, wxALL|wxEXPAND|wxFIXED_MINSIZE, 4);
  wxStaticBoxSizer* sizer_8 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("S/PDIF Out")), wxVERTICAL);
  sizer_5->Add(sizer_8, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  spdifOpticalButton = new wxCheckBox(this, spdifOpticalID, wxT("Optical"));
  sizer_8->Add(spdifOpticalButton, 0, wxTOP, 0);
  spdifProButton = new wxCheckBox(this, spdifProID, wxT("Professional"));
  sizer_8->Add(spdifProButton, 0, wxBOTTOM|wxTOP, 0);
  wxStaticBoxSizer* sizer_11 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("TMS")), wxHORIZONTAL);
  sizer_5->Add(sizer_11, 0, wxEXPAND, 0);
  tmsButton = new wxCheckBox(this, tmsID, wxT("Enable"));
  tmsButton->SetToolTip(wxT("Encode AES or S/PDIF input channel status and track markers in the least significant bits of the audio samples."));
  sizer_11->Add(tmsButton, 0, 0, 0);
  wxBoxSizer* sizer_6 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_6, 1, wxALL|wxEXPAND, 4);
  wxStaticBoxSizer* sizer_9 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("AEB / TEB")), wxVERTICAL);
  sizer_6->Add(sizer_9, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  adat1InternalButton = new wxCheckBox(this, adat1InternalID, wxT("ADAT1"));
  sizer_9->Add(adat1InternalButton, 0, wxTOP, 0);
  adat2InternalButton = new wxCheckBox(this, adat2InternalID, wxT("ADAT2"));
  sizer_9->Add(adat2InternalButton, 0, wxBOTTOM|wxTOP, 0);
  wxStaticBoxSizer* sizer_7 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Word Clk Out")), wxVERTICAL);
  sizer_6->Add(sizer_7, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  singleSpeedWclkButton = new wxCheckBox(this, singleSpeedWclkID, wxT("Single Speed"));
  sizer_7->Add(singleSpeedWclkButton, 0, 0, 0);
  
  sizer_2->AddGrowableCol(0);
  SetSizer(sizer_1);
  sizer_1->Fit(this);
  // end wxGlade
}


BEGIN_EVENT_TABLE(RayDATPanel, wxPanel)
  // begin wxGlade: RayDATPanel::event_table
  EVT_RADIOBUTTON(masterID, RayDATPanel::masterCB)
  EVT_CHOICE(wxID_ANY, RayDATPanel::internalFreqCB)
  EVT_RADIOBUTTON(wclkSyncID, RayDATPanel::wclkSyncCB)
  EVT_RADIOBUTTON(aesSyncID, RayDATPanel::aesSyncCB)
  EVT_RADIOBUTTON(spdifSyncID, RayDATPanel::spdifSyncCB)
  EVT_RADIOBUTTON(adat1SyncID, RayDATPanel::adat1SyncCB)
  EVT_RADIOBUTTON(adat2SyncID, RayDATPanel::adat2SyncCB)
  EVT_RADIOBUTTON(adat3SyncID, RayDATPanel::adat3SyncCB)
  EVT_RADIOBUTTON(adat4SyncID, RayDATPanel::adat4SyncCB)
  EVT_RADIOBUTTON(tcoSyncID, RayDATPanel::tcoSyncCB)
  EVT_RADIOBUTTON(syncInSyncID, RayDATPanel::syncInSyncCB)
  EVT_COMMAND_SCROLL_LINEDOWN(pitchID, RayDATPanel::pitchDownCB)
  EVT_COMMAND_SCROLL_LINEUP(pitchID, RayDATPanel::pitchUpCB)
  EVT_COMMAND_SCROLL_PAGEDOWN(pitchID, RayDATPanel::pitchPrevCB)
  EVT_COMMAND_SCROLL_PAGEUP(pitchID, RayDATPanel::pitchNextCB)
  EVT_SLIDER(pitchID, RayDATPanel::pitchSliderCB)
  EVT_RADIOBOX(spdifInID, RayDATPanel::spdifInCB)
  EVT_CHECKBOX(spdifOpticalID, RayDATPanel::spdifOpticalCB)
  EVT_CHECKBOX(spdifProID, RayDATPanel::spdifProfessionalCB)
  EVT_CHECKBOX(tmsID, RayDATPanel::tmsCB)
  EVT_CHECKBOX(adat1InternalID, RayDATPanel::adat1InternalCB)
  EVT_CHECKBOX(adat2InternalID, RayDATPanel::adat2InternalCB)
  EVT_CHECKBOX(singleSpeedWclkID, RayDATPanel::singleSpeedWclkOutCB)
  // end wxGlade
END_EVENT_TABLE();


void RayDATPanel::masterCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::masterCB) not implemented yet"));
}

void RayDATPanel::internalFreqCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::internalFreqCB) not implemented yet"));
}

void RayDATPanel::wclkSyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::wclkSyncCB) not implemented yet"));
}

void RayDATPanel::aesSyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::aesSyncCB) not implemented yet"));
}

void RayDATPanel::spdifSyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::spdifSyncCB) not implemented yet"));
}

void RayDATPanel::adat1SyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::adat1SyncCB) not implemented yet"));
}

void RayDATPanel::adat2SyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::adat2SyncCB) not implemented yet"));
}

void RayDATPanel::adat3SyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::adat3SyncCB) not implemented yet"));
}

void RayDATPanel::adat4SyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::adat4SyncCB) not implemented yet"));
}

void RayDATPanel::tcoSyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::tcoSyncCB) not implemented yet"));
}

void RayDATPanel::syncInSyncCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::syncInSyncCB) not implemented yet"));
}

void RayDATPanel::pitchDownCB(wxScrollEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::pitchDownCB) not implemented yet"));
}

void RayDATPanel::pitchUpCB(wxScrollEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::pitchUpCB) not implemented yet"));
}

void RayDATPanel::pitchPrevCB(wxScrollEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::pitchPrevCB) not implemented yet"));
}

void RayDATPanel::pitchNextCB(wxScrollEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::pitchNextCB) not implemented yet"));
}

void RayDATPanel::pitchSliderCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::pitchSliderCB) not implemented yet"));
}

void RayDATPanel::spdifInCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::spdifInCB) not implemented yet"));
}

void RayDATPanel::spdifOpticalCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::spdifOpticalCB) not implemented yet"));
}

void RayDATPanel::spdifProfessionalCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::spdifProfessionalCB) not implemented yet"));
}

void RayDATPanel::tmsCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::tmsCB) not implemented yet"));
}

void RayDATPanel::adat1InternalCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::adat1InternalCB) not implemented yet"));
}

void RayDATPanel::adat2InternalCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::adat2InternalCB) not implemented yet"));
}

void RayDATPanel::singleSpeedWclkOutCB(wxCommandEvent &event)  // wxGlade: RayDATPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (RayDATPanel::singleSpeedWclkOutCB) not implemented yet"));
}


// wxGlade: add RayDATPanel event handlers

