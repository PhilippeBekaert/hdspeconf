// -*- C++ -*-
//
// generated by wxGlade 1.0.3 on Fri Nov 19 15:29:07 2021
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include "AioPanel.h"

// begin wxGlade: ::extracode
// end wxGlade



AioPanel::AioPanel(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style):
  wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
  // begin wxGlade: AioPanel::AioPanel
  wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
  wxFlexGridSizer* sizer_2 = new wxFlexGridSizer(5, 1, 0, 0);
  sizer_1->Add(sizer_2, 0, wxALIGN_CENTER_HORIZONTAL, 0);
  wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
  sizer_2->Add(sizer_3, 1, wxEXPAND, 0);
  wxStaticBoxSizer* sizer_13 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Clock Source")), wxVERTICAL);
  sizer_3->Add(sizer_13, 1, wxALL|wxEXPAND, 4);
  clockSourceLabel = new wxStaticText(this, wxID_ANY, wxT("Internal"));
  sizer_13->Add(clockSourceLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_14 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Sample Rate")), wxVERTICAL);
  sizer_3->Add(sizer_14, 1, wxALL|wxEXPAND, 4);
  sampleRateLabel = new wxStaticText(this, wxID_ANY, wxT("47999 Hz"));
  sampleRateLabel->SetBackgroundColour(wxColour(255, 198, 0));
  sizer_14->Add(sampleRateLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_15 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Buffer Size")), wxVERTICAL);
  sizer_3->Add(sizer_15, 1, wxALL|wxEXPAND, 4);
  bufferSizeLabel = new wxStaticText(this, wxID_ANY, wxT("1024"));
  sizer_15->Add(bufferSizeLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_20 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("FW version")), wxHORIZONTAL);
  sizer_3->Add(sizer_20, 0, wxALL|wxEXPAND, 4);
  fwVersionLabel = new wxStaticText(this, wxID_ANY, wxT("21"));
  sizer_20->Add(fwVersionLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_12 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Prefered Clock Source / Input Status")), wxVERTICAL);
  sizer_2->Add(sizer_12, 0, wxALL|wxEXPAND, 4);
  wxFlexGridSizer* grid_sizer_2 = new wxFlexGridSizer(7, 5, 4, 4);
  sizer_12->Add(grid_sizer_2, 1, wxEXPAND, 0);
  masterButton = new wxRadioButton(this, masterID, wxT("Internal"));
  grid_sizer_2->Add(masterButton, 0, wxALIGN_CENTER_VERTICAL, 0);
  wxStaticText* label_8 = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(label_8, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  internalFreqLabel = new wxStaticText(this, wxID_ANY, wxT("44.1 KHz"));
  internalFreqLabel->Hide();
  grid_sizer_2->Add(internalFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  const wxString internalFreqChoice_choices[] = {
    wxT("32 KHz"),
    wxT("44.1 KHz"),
    wxT("48 KHz"),
    wxT("64 Khz"),
    wxT("88.2 KHz"),
    wxT("96 KHz"),
    wxT("128 KHz"),
    wxT("176.4 KHz"),
    wxT("192 KHz"),
  };
  internalFreqChoice = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 9, internalFreqChoice_choices);
  grid_sizer_2->Add(internalFreqChoice, 0, wxRESERVE_SPACE_EVEN_IF_HIDDEN, 0);
  internalWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  grid_sizer_2->Add(internalWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  wclkSyncButton = new wxRadioButton(this, wclkSyncID, wxT("Word Clk"));
  grid_sizer_2->Add(wclkSyncButton, 0, 0, 0);
  wclkStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(wclkStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  wclkFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(wclkFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  wclkWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  wclkWarn->Hide();
  grid_sizer_2->Add(wclkWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  aesSyncButton = new wxRadioButton(this, aesSyncID, wxT("AES"));
  grid_sizer_2->Add(aesSyncButton, 0, 0, 0);
  aesStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(aesStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  aesFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(aesFreqLabel, 0, wxALL, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  aesWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  aesWarn->Hide();
  grid_sizer_2->Add(aesWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  spdifSyncButton = new wxRadioButton(this, spdifSyncID, wxT("S/PDIF"));
  grid_sizer_2->Add(spdifSyncButton, 0, 0, 0);
  spdifStatusLabel = new wxStaticText(this, wxID_ANY, wxT("Sync"));
  grid_sizer_2->Add(spdifStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  spdifFreqLabel = new wxStaticText(this, wxID_ANY, wxT("48 KHz"));
  grid_sizer_2->Add(spdifFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  spdifWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  spdifWarn->Hide();
  grid_sizer_2->Add(spdifWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  adatSyncButton = new wxRadioButton(this, adatSyncID, wxT("ADAT"));
  grid_sizer_2->Add(adatSyncButton, 0, 0, 0);
  adatStatusLabel = new wxStaticText(this, wxID_ANY, wxT("Lock"));
  grid_sizer_2->Add(adatStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  adatFreqLabel = new wxStaticText(this, wxID_ANY, wxT("48 KHz"));
  grid_sizer_2->Add(adatFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  adatWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  adatWarn->Hide();
  grid_sizer_2->Add(adatWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  tcoSyncButton = new wxRadioButton(this, tcoSyncID, wxT("TCO"));
  tcoSyncButton->Enable(0);
  grid_sizer_2->Add(tcoSyncButton, 0, 0, 0);
  tcoStatusLabel = new wxStaticText(this, wxID_ANY, wxT("N/A"));
  grid_sizer_2->Add(tcoStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  tcoFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(tcoFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  tcoWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  tcoWarn->Hide();
  grid_sizer_2->Add(tcoWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  syncInSyncButton = new wxRadioButton(this, syncInSyncID, wxT("Sync In"));
  grid_sizer_2->Add(syncInSyncButton, 0, 0, 0);
  syncInStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(syncInStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  syncInFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(syncInFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  syncInWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  syncInWarn->Hide();
  grid_sizer_2->Add(syncInWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  wxStaticBoxSizer* sizer_16 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Pitch (PPM)")), wxVERTICAL);
  sizer_2->Add(sizer_16, 1, wxALIGN_CENTER_HORIZONTAL|wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 4);
  pitchSlider = new wxSlider(this, pitchID, 0, -50000, 50000, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS|wxSL_LEFT|wxSL_RIGHT);
  sizer_16->Add(pitchSlider, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
  sizer_2->Add(sizer_10, 1, wxEXPAND, 0);
  wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_4, 1, wxALL|wxEXPAND, 4);
  const wxString inputLevelBox_choices[] = {
    wxT("Lo Gain"),
    wxT("+4 dBu"),
    wxT("-10 dBV"),
  };
  inputLevelBox = new wxRadioBox(this, inputLevelID, wxT("Input Level"), wxDefaultPosition, wxDefaultSize, 3, inputLevelBox_choices, 1, wxRA_SPECIFY_COLS);
  inputLevelBox->SetSelection(1);
  sizer_4->Add(inputLevelBox, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  const wxString spdifInBox_choices[] = {
    wxT("Optical"),
    wxT("Coaxial"),
    wxT("Internal"),
  };
  spdifInBox = new wxRadioBox(this, spdifInID, wxT("S/PDIF In"), wxDefaultPosition, wxDefaultSize, 3, spdifInBox_choices, 1, wxRA_SPECIFY_COLS);
  spdifInBox->SetSelection(1);
  sizer_4->Add(spdifInBox, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  wxBoxSizer* sizer_5 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_5, 1, wxALL|wxEXPAND|wxFIXED_MINSIZE, 4);
  const wxString outputLevelBox_choices[] = {
    wxT("Hi Gain"),
    wxT("+4 dBu"),
    wxT("-10 dBV"),
  };
  outputLevelBox = new wxRadioBox(this, outputLevelID, wxT("Output Level"), wxDefaultPosition, wxDefaultSize, 3, outputLevelBox_choices, 1, wxRA_SPECIFY_COLS);
  outputLevelBox->SetSelection(1);
  sizer_5->Add(outputLevelBox, 0, wxEXPAND, 0);
  wxStaticBoxSizer* sizer_8 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("S/PDIF Out")), wxVERTICAL);
  sizer_5->Add(sizer_8, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  spdifOpticalButton = new wxCheckBox(this, spdifOpticalID, wxT("Optical"));
  sizer_8->Add(spdifOpticalButton, 0, wxTOP, 1);
  spdifProButton = new wxCheckBox(this, spdifProID, wxT("Professional"));
  sizer_8->Add(spdifProButton, 0, wxBOTTOM|wxTOP, 2);
  wxStaticBoxSizer* sizer_11 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("TMS")), wxHORIZONTAL);
  sizer_5->Add(sizer_11, 0, wxEXPAND, 0);
  tmsButton = new wxCheckBox(this, tmsID, wxT("Enable"));
  tmsButton->SetToolTip(wxT("Encode AES or S/PDIF input channel status and track markers in the least significant bits of the audio samples."));
  sizer_11->Add(tmsButton, 0, 0, 0);
  wxBoxSizer* sizer_6 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_6, 1, wxALL|wxEXPAND, 4);
  const wxString phonesLevelBox_choices[] = {
    wxT("Hi Gain"),
    wxT("+4 dBu"),
    wxT("-10 dBV"),
  };
  phonesLevelBox = new wxRadioBox(this, phonesLevelID, wxT("Phones"), wxDefaultPosition, wxDefaultSize, 3, phonesLevelBox_choices, 1, wxRA_SPECIFY_COLS);
  phonesLevelBox->SetSelection(1);
  sizer_6->Add(phonesLevelBox, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  const wxString analogOutBox_choices[] = {
    wxT("XLR"),
    wxT("RCA"),
  };
  analogOutBox = new wxRadioBox(this, analogOutID, wxT("Analog Out"), wxDefaultPosition, wxDefaultSize, 2, analogOutBox_choices, 1, wxRA_SPECIFY_COLS);
  analogOutBox->SetSelection(0);
  sizer_6->Add(analogOutBox, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  wxStaticBoxSizer* sizer_7 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Word Clk Out")), wxVERTICAL);
  sizer_6->Add(sizer_7, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  singleSpeedWclkButton = new wxCheckBox(this, singleSpeedWclkID, wxT("Single Speed"));
  sizer_7->Add(singleSpeedWclkButton, 0, 0, 0);
  wxStaticBoxSizer* sizer_17 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Expansion boards")), wxVERTICAL);
  sizer_2->Add(sizer_17, 0, wxALL, 4);
  wxGridSizer* grid_sizer_1 = new wxGridSizer(1, 4, 0, 0);
  sizer_17->Add(grid_sizer_1, 0, wxALL|wxEXPAND, 4);
  ai4sButton = new wxCheckBox(this, ai4sID, wxT("AI4S"));
  ai4sButton->Enable(0);
  grid_sizer_1->Add(ai4sButton, 0, 0, 0);
  ao4sButton = new wxCheckBox(this, ao4sID, wxT("AO4S"));
  ao4sButton->Enable(0);
  grid_sizer_1->Add(ao4sButton, 0, 0, 0);
  tcoButton = new wxCheckBox(this, tcoID, wxT("TCO"));
  tcoButton->Enable(0);
  grid_sizer_1->Add(tcoButton, 0, 0, 0);
  adatInternalButton = new wxCheckBox(this, adatInternalID, wxT("AEB / TEB"));
  grid_sizer_1->Add(adatInternalButton, 0, 0, 0);
  
  sizer_2->AddGrowableCol(0);
  SetSizer(sizer_1);
  sizer_1->Fit(this);
  // end wxGlade
}


BEGIN_EVENT_TABLE(AioPanel, wxPanel)
  // begin wxGlade: AioPanel::event_table
  EVT_RADIOBUTTON(masterID, AioPanel::masterCB)
  EVT_CHOICE(wxID_ANY, AioPanel::internalFreqCB)
  EVT_RADIOBUTTON(wclkSyncID, AioPanel::wclkSyncCB)
  EVT_RADIOBUTTON(aesSyncID, AioPanel::aesSyncCB)
  EVT_RADIOBUTTON(spdifSyncID, AioPanel::spdifSyncCB)
  EVT_RADIOBUTTON(adatSyncID, AioPanel::adatSyncCB)
  EVT_RADIOBUTTON(tcoSyncID, AioPanel::tcoSyncCB)
  EVT_RADIOBUTTON(syncInSyncID, AioPanel::syncInSyncCB)
  EVT_COMMAND_SCROLL_LINEDOWN(pitchID, AioPanel::pitchDownCB)
  EVT_COMMAND_SCROLL_LINEUP(pitchID, AioPanel::pitchUpCB)
  EVT_COMMAND_SCROLL_PAGEDOWN(pitchID, AioPanel::pitchPrevCB)
  EVT_COMMAND_SCROLL_PAGEUP(pitchID, AioPanel::pitchNextCB)
  EVT_SLIDER(pitchID, AioPanel::pitchSliderCB)
  EVT_RADIOBOX(inputLevelID, AioPanel::inputLevelCB)
  EVT_RADIOBOX(spdifInID, AioPanel::spdifInCB)
  EVT_RADIOBOX(outputLevelID, AioPanel::outputLevelCB)
  EVT_CHECKBOX(spdifOpticalID, AioPanel::spdifOpticalCB)
  EVT_CHECKBOX(spdifProID, AioPanel::spdifProfessionalCB)
  EVT_CHECKBOX(tmsID, AioPanel::tmsCB)
  EVT_RADIOBOX(phonesLevelID, AioPanel::phonesLevelCB)
  EVT_RADIOBOX(analogOutID, AioPanel::analogOutCB)
  EVT_CHECKBOX(singleSpeedWclkID, AioPanel::singleSpeedWclkOutCB)
  EVT_CHECKBOX(adatInternalID, AioPanel::adatInternalCB)
  // end wxGlade
END_EVENT_TABLE();


void AioPanel::masterCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::masterCB) not implemented yet"));
}

void AioPanel::internalFreqCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::internalFreqCB) not implemented yet"));
}

void AioPanel::wclkSyncCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::wclkSyncCB) not implemented yet"));
}

void AioPanel::aesSyncCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::aesSyncCB) not implemented yet"));
}

void AioPanel::spdifSyncCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::spdifSyncCB) not implemented yet"));
}

void AioPanel::adatSyncCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::adatSyncCB) not implemented yet"));
}

void AioPanel::tcoSyncCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::tcoSyncCB) not implemented yet"));
}

void AioPanel::syncInSyncCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::syncInSyncCB) not implemented yet"));
}

void AioPanel::pitchDownCB(wxScrollEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::pitchDownCB) not implemented yet"));
}

void AioPanel::pitchUpCB(wxScrollEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::pitchUpCB) not implemented yet"));
}

void AioPanel::pitchPrevCB(wxScrollEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::pitchPrevCB) not implemented yet"));
}

void AioPanel::pitchNextCB(wxScrollEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::pitchNextCB) not implemented yet"));
}

void AioPanel::pitchSliderCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::pitchSliderCB) not implemented yet"));
}

void AioPanel::inputLevelCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::inputLevelCB) not implemented yet"));
}

void AioPanel::spdifInCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::spdifInCB) not implemented yet"));
}

void AioPanel::outputLevelCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::outputLevelCB) not implemented yet"));
}

void AioPanel::spdifOpticalCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::spdifOpticalCB) not implemented yet"));
}

void AioPanel::spdifProfessionalCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::spdifProfessionalCB) not implemented yet"));
}

void AioPanel::tmsCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::tmsCB) not implemented yet"));
}

void AioPanel::phonesLevelCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::phonesLevelCB) not implemented yet"));
}

void AioPanel::analogOutCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::analogOutCB) not implemented yet"));
}

void AioPanel::singleSpeedWclkOutCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::singleSpeedWclkOutCB) not implemented yet"));
}

void AioPanel::adatInternalCB(wxCommandEvent &event)  // wxGlade: AioPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (AioPanel::adatInternalCB) not implemented yet"));
}


// wxGlade: add AioPanel event handlers

