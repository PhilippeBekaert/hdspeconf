// -*- C++ -*-
//
// generated by wxGlade 1.0.3 on Tue Dec  7 21:50:43 2021
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include "MADIPanel.h"

// begin wxGlade: ::extracode
// end wxGlade



MADIPanel::MADIPanel(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style):
  wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
  // begin wxGlade: MADIPanel::MADIPanel
  wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
  wxFlexGridSizer* sizer_2 = new wxFlexGridSizer(5, 1, 0, 0);
  sizer_1->Add(sizer_2, 0, wxALIGN_CENTER_HORIZONTAL, 0);
  wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
  sizer_2->Add(sizer_3, 1, wxEXPAND, 0);
  wxStaticBoxSizer* sizer_13 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Clock Source")), wxVERTICAL);
  sizer_3->Add(sizer_13, 1, wxALL|wxEXPAND, 4);
  clockSourceLabel = new wxStaticText(this, wxID_ANY, wxT("Internal"));
  sizer_13->Add(clockSourceLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_14 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Sample Rate")), wxVERTICAL);
  sizer_3->Add(sizer_14, 1, wxALL|wxEXPAND, 4);
  sampleRateLabel = new wxStaticText(this, wxID_ANY, wxT("47999 Hz"));
  sampleRateLabel->SetBackgroundColour(wxColour(255, 198, 0));
  sizer_14->Add(sampleRateLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_15 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Buffer Size")), wxVERTICAL);
  sizer_3->Add(sizer_15, 1, wxALL|wxEXPAND, 4);
  bufferSizeLabel = new wxStaticText(this, wxID_ANY, wxT("1024"));
  sizer_15->Add(bufferSizeLabel, 0, wxEXPAND|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_20 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("FW version")), wxHORIZONTAL);
  sizer_3->Add(sizer_20, 0, wxALL|wxEXPAND, 4);
  fwVersionLabel = new wxStaticText(this, wxID_ANY, wxT("21"));
  sizer_20->Add(fwVersionLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_12 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Prefered Clock Source")), wxVERTICAL);
  sizer_2->Add(sizer_12, 0, wxALL|wxEXPAND, 4);
  wxFlexGridSizer* grid_sizer_2 = new wxFlexGridSizer(5, 5, 4, 4);
  sizer_12->Add(grid_sizer_2, 1, wxEXPAND, 0);
  masterButton = new wxRadioButton(this, masterID, wxT("Internal"));
  grid_sizer_2->Add(masterButton, 0, wxALIGN_CENTER_VERTICAL, 0);
  wxStaticText* label_8 = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(label_8, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  internalFreqLabel = new wxStaticText(this, wxID_ANY, wxT("44.1 KHz"));
  internalFreqLabel->Hide();
  grid_sizer_2->Add(internalFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  const wxString internalFreqChoice_choices[] = {
    wxT("32 KHz"),
    wxT("44.1 KHz"),
    wxT("48 KHz"),
    wxT("64 Khz"),
    wxT("88.2 KHz"),
    wxT("96 KHz"),
    wxT("128 KHz"),
    wxT("176.4 KHz"),
    wxT("192 KHz"),
  };
  internalFreqChoice = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 9, internalFreqChoice_choices);
  grid_sizer_2->Add(internalFreqChoice, 0, wxRESERVE_SPACE_EVEN_IF_HIDDEN, 0);
  internalWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  grid_sizer_2->Add(internalWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  wclkSyncButton = new wxRadioButton(this, wclkSyncID, wxT("Word Clk"));
  grid_sizer_2->Add(wclkSyncButton, 0, 0, 0);
  wclkStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(wclkStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  wclkFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(wclkFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  wclkWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  wclkWarn->Hide();
  grid_sizer_2->Add(wclkWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  madiSyncButton = new wxRadioButton(this, madiSyncID, wxT("MADI"));
  grid_sizer_2->Add(madiSyncButton, 0, 0, 0);
  madiStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(madiStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  madiFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(madiFreqLabel, 0, wxALL, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  madiWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  madiWarn->Hide();
  grid_sizer_2->Add(madiWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  tcoSyncButton = new wxRadioButton(this, tcoSyncID, wxT("TCO"));
  tcoSyncButton->Enable(0);
  grid_sizer_2->Add(tcoSyncButton, 0, 0, 0);
  tcoStatusLabel = new wxStaticText(this, wxID_ANY, wxT("N/A"));
  grid_sizer_2->Add(tcoStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  tcoFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(tcoFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  tcoWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  tcoWarn->Hide();
  grid_sizer_2->Add(tcoWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  syncInSyncButton = new wxRadioButton(this, syncInSyncID, wxT("Sync In"));
  grid_sizer_2->Add(syncInSyncButton, 0, 0, 0);
  syncInStatusLabel = new wxStaticText(this, wxID_ANY, wxT("No Lock"));
  grid_sizer_2->Add(syncInStatusLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  syncInFreqLabel = new wxStaticText(this, wxID_ANY, wxEmptyString);
  grid_sizer_2->Add(syncInFreqLabel, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 4);
  grid_sizer_2->Add(0, 0, 0, 0, 0);
  syncInWarn = new wxStaticBitmap(this, wxID_ANY, wxBitmap(wxT("./dialog-warning.png"), wxBITMAP_TYPE_ANY));
  syncInWarn->Hide();
  grid_sizer_2->Add(syncInWarn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 16);
  wxStaticBoxSizer* sizer_16 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Pitch (PPM)")), wxVERTICAL);
  sizer_2->Add(sizer_16, 1, wxALIGN_CENTER_HORIZONTAL|wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 4);
  pitchSlider = new wxSlider(this, pitchID, 0, -50000, 50000, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS|wxSL_LEFT|wxSL_RIGHT);
  sizer_16->Add(pitchSlider, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
  sizer_2->Add(sizer_10, 1, wxEXPAND, 0);
  wxBoxSizer* sizer_5 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_5, 1, wxALL|wxEXPAND|wxFIXED_MINSIZE, 4);
  const wxString madiInputBox_choices[] = {
    wxT("Optical"),
    wxT("Coaxial"),
  };
  madiInputBox = new wxRadioBox(this, madiInputID, wxT("MADI In"), wxDefaultPosition, wxDefaultSize, 2, madiInputBox_choices, 2, wxRA_SPECIFY_ROWS);
  madiInputBox->SetSelection(0);
  sizer_5->Add(madiInputBox, 0, wxEXPAND, 0);
  autoselectInputButton = new wxCheckBox(this, autoselectInputID, wxT("Auto Select"));
  sizer_5->Add(autoselectInputButton, 0, wxEXPAND, 0);
  sizer_5->Add(0, 0, 0, 0, 0);
  wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_4, 1, wxALL|wxEXPAND, 4);
  wxStaticBoxSizer* sizer_8 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("MADI Out")), wxVERTICAL);
  sizer_4->Add(sizer_8, 1, wxEXPAND, 0);
  tx64chButton = new wxCheckBox(this, tx64chID, wxT("64/32/16 Ch"));
  sizer_8->Add(tx64chButton, 0, wxEXPAND, 0);
  doubleWireButton = new wxCheckBox(this, doubleWireID, wxT("48K Frame"));
  sizer_8->Add(doubleWireButton, 0, wxEXPAND, 0);
  wxBoxSizer* sizer_6 = new wxBoxSizer(wxVERTICAL);
  sizer_10->Add(sizer_6, 1, wxALL|wxEXPAND, 4);
  wxStaticBoxSizer* sizer_7 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("Word Clk Out")), wxVERTICAL);
  sizer_6->Add(sizer_7, 0, wxEXPAND|wxFIXED_MINSIZE, 0);
  singleSpeedWclkButton = new wxCheckBox(this, singleSpeedWclkID, wxT("Single Speed"));
  sizer_7->Add(singleSpeedWclkButton, 0, 0, 0);
  wxStaticBoxSizer* sizer_11 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxT("TMS")), wxHORIZONTAL);
  sizer_6->Add(sizer_11, 0, wxEXPAND, 0);
  tmsButton = new wxCheckBox(this, tmsID, wxT("Enable"));
  tmsButton->SetToolTip(wxT("Encode AES or S/PDIF input channel status and track markers in the least significant bits of the audio samples."));
  sizer_11->Add(tmsButton, 0, 0, 0);
  wxBoxSizer* sizer_17 = new wxBoxSizer(wxHORIZONTAL);
  sizer_2->Add(sizer_17, 1, wxALL|wxEXPAND, 4);
  const wxString currentMadiInputBox_choices[] = {
    wxT("Optical"),
    wxT("Coaxial"),
  };
  currentMadiInputBox = new wxRadioBox(this, currentMadiInputBoxID, wxT("MADI In Status"), wxDefaultPosition, wxDefaultSize, 2, currentMadiInputBox_choices, 2, wxRA_SPECIFY_COLS);
  currentMadiInputBox->SetSelection(0);
  sizer_17->Add(currentMadiInputBox, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
  wxStaticBoxSizer* sizer_18 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, wxEmptyString), wxHORIZONTAL);
  sizer_17->Add(sizer_18, 1, wxEXPAND|wxLEFT, 4);
  rx64chButton = new wxCheckBox(this, rx64chID, wxT("64/32/16 Ch"));
  rx64chButton->Enable(0);
  sizer_18->Add(rx64chButton, 0, wxALIGN_CENTER_VERTICAL, 0);
  
  sizer_2->AddGrowableCol(0);
  SetSizer(sizer_1);
  sizer_1->Fit(this);
  // end wxGlade
}


BEGIN_EVENT_TABLE(MADIPanel, wxPanel)
  // begin wxGlade: MADIPanel::event_table
  EVT_RADIOBUTTON(masterID, MADIPanel::masterCB)
  EVT_CHOICE(wxID_ANY, MADIPanel::internalFreqCB)
  EVT_RADIOBUTTON(wclkSyncID, MADIPanel::wclkSyncCB)
  EVT_RADIOBUTTON(madiSyncID, MADIPanel::madiSyncCB)
  EVT_RADIOBUTTON(tcoSyncID, MADIPanel::tcoSyncCB)
  EVT_RADIOBUTTON(syncInSyncID, MADIPanel::syncInSyncCB)
  EVT_COMMAND_SCROLL_LINEDOWN(pitchID, MADIPanel::pitchDownCB)
  EVT_COMMAND_SCROLL_LINEUP(pitchID, MADIPanel::pitchUpCB)
  EVT_COMMAND_SCROLL_PAGEDOWN(pitchID, MADIPanel::pitchPrevCB)
  EVT_COMMAND_SCROLL_PAGEUP(pitchID, MADIPanel::pitchNextCB)
  EVT_SLIDER(pitchID, MADIPanel::pitchSliderCB)
  EVT_RADIOBOX(madiInputID, MADIPanel::madiInputCB)
  EVT_CHECKBOX(autoselectInputID, MADIPanel::autoselectInputCB)
  EVT_CHECKBOX(tx64chID, MADIPanel::tx64chCB)
  EVT_CHECKBOX(doubleWireID, MADIPanel::doubleWireCB)
  EVT_CHECKBOX(singleSpeedWclkID, MADIPanel::singleSpeedWclkOutCB)
  EVT_CHECKBOX(tmsID, MADIPanel::tmsCB)
  // end wxGlade
END_EVENT_TABLE();


void MADIPanel::masterCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::masterCB) not implemented yet"));
}

void MADIPanel::internalFreqCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::internalFreqCB) not implemented yet"));
}

void MADIPanel::wclkSyncCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::wclkSyncCB) not implemented yet"));
}

void MADIPanel::madiSyncCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::madiSyncCB) not implemented yet"));
}

void MADIPanel::tcoSyncCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::tcoSyncCB) not implemented yet"));
}

void MADIPanel::syncInSyncCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::syncInSyncCB) not implemented yet"));
}

void MADIPanel::pitchDownCB(wxScrollEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::pitchDownCB) not implemented yet"));
}

void MADIPanel::pitchUpCB(wxScrollEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::pitchUpCB) not implemented yet"));
}

void MADIPanel::pitchPrevCB(wxScrollEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::pitchPrevCB) not implemented yet"));
}

void MADIPanel::pitchNextCB(wxScrollEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::pitchNextCB) not implemented yet"));
}

void MADIPanel::pitchSliderCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::pitchSliderCB) not implemented yet"));
}

void MADIPanel::madiInputCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::madiInputCB) not implemented yet"));
}

void MADIPanel::autoselectInputCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::autoselectInputCB) not implemented yet"));
}

void MADIPanel::tx64chCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::tx64chCB) not implemented yet"));
}

void MADIPanel::doubleWireCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::doubleWireCB) not implemented yet"));
}

void MADIPanel::singleSpeedWclkOutCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::singleSpeedWclkOutCB) not implemented yet"));
}

void MADIPanel::tmsCB(wxCommandEvent &event)  // wxGlade: MADIPanel.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
  wxLogDebug(wxT("Event handler (MADIPanel::tmsCB) not implemented yet"));
}


// wxGlade: add MADIPanel event handlers

